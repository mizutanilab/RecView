Microsoft (R) Macro Assembler (x64) Version 14.16.27025.1   06/04/24 13:09:45
projx64.asm						     Page 1 - 1


				;ml64.exe

 00000000			DATA segment align(64)
 00000000 00000000		FZMM0_15 real4 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0
	   3F800000
	   40000000
	   40400000
	   40800000
	   40A00000
	   40C00000
	   40E00000
	   41000000
	   41100000
	   41200000
	   41300000
	   41400000
	   41500000
	   41600000
	   41700000
 00000040 41800000		FZMM16_16 real4 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
	   41800000
 00000080 00000000		FZMM0_0 real4 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 000000C0 00000000		F76543210 real4 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0
	   3F800000
	   40000000
	   40400000
	   40800000
	   40A00000
	   40C00000
	   40E00000
 000000E0 41000000		F88888888 real4 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0
	   41000000
	   41000000
	   41000000
	   41000000
	   41000000
	   41000000
	   41000000
 00000100 00000000		F00000000 real4 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000120 00000000		F3210 real4 0.0, 1.0, 2.0, 3.0
	   3F800000
	   40000000
	   40400000
 00000130			DATA ends

 00000000			.code

 00000000			projx64 PROC
				;	mov r10, rcx ; the first arg = rcx
				;	mov r10, rdx ; the 2nd arg = rdx
				;	mov rax, r10 ; rax to return result

				;			for (int iy=iy0; iy<iy1; iy++) {
				;				const int ifpidx = iy * ixdimp;
				;				const float fyoff = iy * fsin + foffset;
				;				for (int ix=0; ix<ixdimp; ix++) {
				;					int ix0 = (int)(ix * fcos + fyoff);
				;					if (ix0 < 0) continue;
				;					if (ix0 >= ixdimpg) continue;
				;					ifp[ifpidx + ix] += ipgp[ix0];
				;				}
				;			}

				;local valiables
				;	local pmxcsr :dword
				;	local smxcsr :dword
					local regXMM6 :oword
					local regXMM7 :oword

				;store registers
 00000008  53				push rbx
 00000009  55				push rbp
 0000000A  56				push rsi
 0000000B  57				push rdi
 0000000C  41/ 54			push r12
 0000000E  41/ 55			push r13
 00000010  F3/ 0F 7F 75			movdqu regXMM6, xmm6
	   F0
 00000015  F3/ 0F 7F 7D			movdqu regXMM7, xmm7
	   E0

				;get pointer to args
 0000001A  48/ 8B F1			mov rsi, rcx	; arg #1

				;init params
				;	mov ixdimpg, [rsi + 24]
 0000001D  4C/ 8B 56 20			mov r10, [rsi + 32]	; ixdimp
 00000021  4D/ 8B CA			mov r9, r10
 00000024  49/ C1 E1 02			shl r9, 2	; r9<==ixdimp * 4
				;	mov ifp, [rsi + 40]
				;	mov igp, [rsi + 48]
 00000028  4C/ 8B 66 40			mov r12, [rsi + 64]	;iy0
 0000002C  4C/ 8B 6E 48			mov r13, [rsi + 72]	;iy1

				;sse rounding mode RC=00B (MXCSR[14:13])
				;	stmxcsr smxcsr
				;	stmxcsr pmxcsr
				;	and pmxcsr, 0FFFF9FFFh
				;	ldmxcsr pmxcsr

				;jump to AVX routine
 00000030  48/ 8B 46 38			mov rax, [rsi + 56]	; AVX flag
 00000034  48/ 83 E0 02			and rax, 000000002h
 00000038  0F 85 000001D4		jnz USEAVX512
 0000003E  48/ 8B 46 38			mov rax, [rsi + 56]	; AVX flag
 00000042  48/ 83 E0 01			and rax, 000000001h
 00000046  0F 85 000000F6		jnz USEAVX

				;load valiables	
 0000004C  49/ 8B C5			mov rax, r13; iy = iy1
 0000004F  48/ FF C8			dec rax
 00000052  49/ 8B CA			mov rcx, r10; ix = ixdimp
 00000055  48/ F7 E9			imul rcx
 00000058  48/ C1 E0 02			shl rax, 2	; ixy = ixdimp * (iy1 - 1) * 4
 0000005C  48/ 03 46 28			add rax, [rsi + 40]	; ixy += ifp
 00000060  48/ 8B F8			mov rdi, rax

 00000063  48/ 8B 06			mov rax, [rsi]	; &fcos
 00000066  F3/ 0F 10 00			movss xmm0, real4 ptr [rax]
 0000006A  0F C6 C0 00			shufps xmm0, xmm0, 0
					
 0000006E  48/ 8B 46 08			mov rax, [rsi + 8]	; &fsin
 00000072  F3/ 0F 10 08			movss xmm1, real4 ptr [rax]
 00000076  0F C6 C9 00			shufps xmm1, xmm1, 0

 0000007A  48/ 8B 46 10			mov rax, [rsi + 16]	; &foffset
 0000007E  F3/ 0F 10 38			movss xmm7, real4 ptr [rax]
 00000082  0F C6 FF 00			shufps xmm7, xmm7, 0

 00000086  0F 28 35			movaps xmm6, F3210
	   00000120 R
					
				;start process
 0000008D  48/ 8B 4E 18			mov rcx, [rsi + 24]	; ixdimpg
 00000091  48/ 8B 76 30			mov rsi, [rsi + 48]	; igp

 00000095  49/ 8B D5			mov rdx, r13	; iy<==iy1
 00000098  48/ FF CA			dec rdx
 0000009B  48/ C7 C0			mov rax, 0
	   00000000
 000000A2			LOOPY:
 000000A2  49/ 8B DA			mov rbx, r10	; ix<==ixdimp
 000000A5  48/ FF CB			dec rbx
 000000A8  F3/ 48/ 0F 2A DA		cvtsi2ss xmm3, rdx	; xmm3<==iy
 000000AD  0F C6 DB 00			shufps xmm3, xmm3, 0	; xmm3<==iy, iy, iy, iy
 000000B1  0F 28 E9			movaps xmm5, xmm1	; xmm5<==fsin, fsin, fsin, fsin
 000000B4  0F 59 EB			mulps xmm5, xmm3	; iy * fsin for each float
 000000B7  0F 58 EF			addps xmm5, xmm7	; + foffset for each float
 000000BA			LOOPX:
 000000BA  F3/ 48/ 0F 2A D3		cvtsi2ss xmm2, rbx	; xmm2<==ix
 000000BF  0F C6 D2 00			shufps xmm2, xmm2, 0	; xmm2<==ix, ix, ix, ix
 000000C3  0F 5C D6			subps xmm2, xmm6	; xmm2<==ix-3, ix-2, ix-2, ix
 000000C6  0F 28 E0			movaps xmm4, xmm0	; xmm4<==fcos, fcos, fcos, fcos
 000000C9  0F 59 E2			mulps xmm4, xmm2	; (ix-n) * fcos
 000000CC  0F 58 E5			addps xmm4, xmm5	; (ix-n) * fcos + foffset
 000000CF  F3/ 0F 5B E4			cvttps2dq xmm4, xmm4	; xmm4 float*4 to integer32*4
 000000D3  66| 0F 7E E0			movd eax, xmm4	; lower 4 bytes to eax
				;	pextrd eax, xmm4, 0	; SSE4.1
 000000D7  3B C1			cmp eax, ecx	; ix<=>ixdimpg
 000000D9  73 06			jae LOOPXSKIP1	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 000000DB  8B 04 86			mov eax, [rsi + rax * 4]	; eax<==igp[ix * DBPT_GINTP]
 000000DE  01 04 9F			add [rdi + rbx * 4], eax	; ifp[ix] += eax
 000000E1			LOOPXSKIP1:
 000000E1  48/ FF CB			dec rbx	; ix--
 000000E4  7C 48			jl LOOPYEND	; ix < 0
 000000E6  66| 0F 73 DC			psrldq xmm4, 4	; shift right by 4 bytes (integer32)
	   04
 000000EB  66| 0F 7E E0			movd eax, xmm4
				;	pextrd eax, xmm4, 1	; SSE4.1
 000000EF  3B C1			cmp eax, ecx; ixdimpg
 000000F1  73 06			jae LOOPXSKIP2	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 000000F3  8B 04 86			mov eax, [rsi + rax * 4]
 000000F6  01 04 9F			add [rdi + rbx * 4], eax
 000000F9			LOOPXSKIP2:
 000000F9  48/ FF CB			dec rbx	; ix--
 000000FC  7C 30			jl LOOPYEND	; ix < 0
 000000FE  66| 0F 73 DC			psrldq xmm4, 4
	   04
 00000103  66| 0F 7E E0			movd eax, xmm4
				;	pextrd eax, xmm4, 2	; SSE4.1
 00000107  3B C1			cmp eax, ecx; ixdimpg
 00000109  73 06			jae LOOPXSKIP3	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 0000010B  8B 04 86			mov eax, [rsi + rax * 4]
 0000010E  01 04 9F			add [rdi + rbx * 4], eax
 00000111			LOOPXSKIP3:
 00000111  48/ FF CB			dec rbx	; ix--
 00000114  7C 18			jl LOOPYEND	; ix < 0
 00000116  66| 0F 73 DC			psrldq xmm4, 4
	   04
 0000011B  66| 0F 7E E0			movd eax, xmm4
				;	pextrd eax, xmm4, 3	; SSE4.1
 0000011F  3B C1			cmp eax, ecx; ixdimpg
 00000121  73 06			jae LOOPXEND	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 00000123  8B 04 86			mov eax, [rsi + rax * 4]
 00000126  01 04 9F			add [rdi + rbx * 4], eax
 00000129			LOOPXEND:
 00000129  48/ FF CB			dec rbx	; ix--
 0000012C  7D 8C			jge LOOPX	; ix >= 0
 0000012E			LOOPYEND:
 0000012E  49/ 2B F9			sub rdi, r9 ; ixdimp*4
 00000131  48/ FF CA			dec rdx	; iy--
 00000134  49/ 3B D4			cmp rdx, r12
 00000137  0F 8D FFFFFF65		jge LOOPY	; iy >= iy0

 0000013D  E9 000001BC			jmp RTN

 00000142			USEAVX:
				;load valiables	
 00000142  48/ 8B 06			mov rax, [rsi]	; &fcos
 00000145  C4 E2 7D/ 18 00		vbroadcastss ymm0, real4 ptr [rax]
 0000014A  4C/ 8B 46 08			mov r8, [rsi + 8]	; &fsin
 0000014E  4C/ 8B 5E 10			mov r11, [rsi + 16]	; &foffset

 00000152  48/ 8B 4E 18			mov rcx, [rsi + 24]	; ixdimpg
 00000156  C4 E1 CA/ 2A F1		vcvtsi2ss xmm6, xmm6, rcx	; xmm6<==ixdimpg
 0000015B  C4 E2 7D/ 18 F6		vbroadcastss ymm6, xmm6	; ymm6<==ixdimpg, ixdimpg, ixdimpg, ixdimpg
 00000160  C4 C1 F2/ 2A CA		vcvtsi2ss xmm1, xmm1, r10	; xmm1<==ixdimp
 00000165  C4 E2 7D/ 18 C9		vbroadcastss ymm1, xmm1	; ymm1<==ixdimp, ixdimp, ixdimp, ixdimp
					
 0000016A  49/ 8B C4			mov rax, r12; iy = iy0
 0000016D  49/ 8B CA			mov rcx, r10; ix = ixdimp
 00000170  48/ F7 E9			imul rcx
 00000173  48/ C1 E0 02			shl rax, 2	; ixy = ixdimp * iy0 * 4
 00000177  48/ 03 46 28			add rax, [rsi + 40]	; ixy += ifp
 0000017B  48/ 8B F8			mov rdi, rax
				;	mov rdi, [rsi + 40]	; ifp
 0000017E  48/ 8B 76 30			mov rsi, [rsi + 48]	; igp

 00000182  49/ 8B D4			mov rdx, r12	; iy<==iy0
 00000185			ALOOPY:
 00000185  48/ C7 C3			mov rbx, 0	; ix<==0
	   00000000
 0000018C  C5 FC/ 28 15			vmovaps ymm2, F76543210	; reset ix
	   000000C0 R
 00000194  C4 E1 E2/ 2A DA		vcvtsi2ss xmm3, xmm3, rdx	; xmm3<==iy
 00000199  C4 E2 7D/ 18 DB		vbroadcastss ymm3, xmm3	; xmm3<==iy, iy, iy, iy
 0000019E  C4 C2 7D/ 18 28		vbroadcastss ymm5, real4 ptr [r8]
 000001A3  C5 D4/ 59 EB			vmulps ymm5, ymm5, ymm3	; iy * fsin for each float
 000001A7  C4 C2 7D/ 18 3B		vbroadcastss ymm7, real4 ptr [r11]	; ymm7<==foffset
 000001AC  C5 D4/ 58 EF			vaddps ymm5, ymm5, ymm7	; ymm5<==iy * fsin + foffset
 000001B0			ALOOPX:
 000001B0  C5 FC/ 59 E2			vmulps ymm4, ymm0, ymm2	; (ix+n) * fcos
 000001B4  C5 DC/ 58 E5			vaddps ymm4, ymm4, ymm5	; (ix+n) * fcos + foffset
 000001B8  C5 DC/ C2 FE 01		vcmpltps ymm7, ymm4, ymm6	; ymm7[i:i]=1 if (ymm4 < ixdimpg)
 000001BD  C5 DC/ C2 1D			vcmpgeps ymm3, ymm4, F00000000	; ymm3[i:i]=1 if (ymm4 >= 0)
	   00000100 R 0D
 000001C6  C5 C5/ DB FB			vpand ymm7, ymm7, ymm3
 000001CA  C5 E5/ EF DB			vpxor ymm3, ymm3, ymm3	; clear ymm3
 000001CE  C5 FE/ 5B E4			vcvttps2dq ymm4, ymm4	; ymm4 float*8 to integer32*8
 000001D2  C4 E2 45/ 90 1C		vpgatherdd ymm3, [rsi + ymm4 * 4], ymm7	; load [rsi+ymm4*4] if ymm7=1
	   A6
 000001D8  C5 EC/ C2 F9 01		vcmpltps ymm7, ymm2, ymm1	; ymm7[i:i]=1 if (ymm2 < ixdimp)
 000001DD  C4 E2 45/ 8C 24		vpmaskmovd ymm4, ymm7, [rdi + rbx * 4]
	   9F
 000001E3  C5 E5/ FE E4			vpaddd ymm4, ymm3, ymm4
 000001E7  C4 E2 45/ 8E 24		vpmaskmovd [rdi + rbx * 4], ymm7, ymm4
	   9F

 000001ED  C5 EC/ 58 15			vaddps ymm2, ymm2, F88888888	; ymm2 + 8.0
	   000000E0 R
 000001F5  48/ 83 C3 08			add rbx, 8
 000001F9  49/ 3B DA			cmp rbx, r10
 000001FC  72 B2			jnae ALOOPX	; ix < ixdimp
 000001FE			ALOOPYEND2:
 000001FE  49/ 03 F9			add rdi, r9 ; +ixdimp*4
 00000201  48/ FF C2			inc rdx	; iy++
 00000204  49/ 3B D5			cmp rdx, r13
 00000207  0F 82 FFFFFF78		jnae ALOOPY	; iy < iy1

 0000020D  E9 000000EC			jmp RTN

 00000212			USEAVX512:
				;220417
				;load valiables	
 00000212  48/ 8B 06			mov rax, [rsi]	; &fcos
 00000215  62 F2 7D 48/ 18		vbroadcastss zmm0, real4 ptr [rax]
	   00
 0000021B  4C/ 8B 46 08			mov r8, [rsi + 8]	; &fsin
 0000021F  4C/ 8B 5E 10			mov r11, [rsi + 16]	; &foffset

 00000223  48/ 8B 4E 18			mov rcx, [rsi + 24]	; ixdimpg
 00000227  C4 E1 CA/ 2A F1		vcvtsi2ss xmm6, xmm6, rcx	; xmm6<==ixdimpg
 0000022C  62 F2 7D 48/ 18		vbroadcastss zmm6, xmm6	; zmm6<==ixdimpg, ixdimpg, ixdimpg, ixdimpg
	   F6
 00000232  C4 C1 F2/ 2A CA		vcvtsi2ss xmm1, xmm1, r10	; xmm1<==ixdimp
 00000237  62 F2 7D 48/ 18		vbroadcastss zmm1, xmm1	; zmm1<==ixdimp, ixdimp, ixdimp, ixdimp
	   C9
					
 0000023D  49/ 8B C4			mov rax, r12; iy = iy0
 00000240  49/ 8B CA			mov rcx, r10; ix = ixdimp
 00000243  48/ F7 E9			imul rcx
 00000246  48/ C1 E0 02			shl rax, 2	; ixy = ixdimp * iy0 * 4
 0000024A  48/ 03 46 28			add rax, [rsi + 40]	; ixy += ifp
 0000024E  48/ 8B F8			mov rdi, rax
				;	mov rdi, [rsi + 40]	; ifp
 00000251  48/ 8B 76 30			mov rsi, [rsi + 48]	; igp

 00000255  49/ 8B D4			mov rdx, r12	; iy<==iy0
 00000258			A5LOOPY:
 00000258  48/ C7 C3			mov rbx, 0	; ix<==0
	   00000000
 0000025F  62 F1 7C 48/ 28		vmovaps zmm2, FZMM0_15	; reset ix
	   15 00000000 R
 00000269  C4 E1 E2/ 2A DA		vcvtsi2ss xmm3, xmm3, rdx	; xmm3<==iy
 0000026E  62 F2 7D 48/ 18		vbroadcastss zmm3, xmm3	; xmm3<==iy, iy, iy, iy
	   DB
 00000274  62 D2 7D 48/ 18		vbroadcastss zmm5, real4 ptr [r8]
	   28
 0000027A  62 F1 54 48/ 59		vmulps zmm5, zmm5, zmm3	; iy * fsin for each float
	   EB
 00000280  62 D2 7D 48/ 18		vbroadcastss zmm7, real4 ptr [r11]	; zmm7<==foffset
	   3B
 00000286  62 F1 54 48/ 58		vaddps zmm5, zmm5, zmm7	; zmm5<==iy * fsin + foffset
	   EF
 0000028C			A5LOOPX:
 0000028C  62 F1 7C 48/ 59		vmulps zmm4, zmm0, zmm2	; (ix+n) * fcos
	   E2
 00000292  62 F1 5C 48/ 58		vaddps zmm4, zmm4, zmm5	; (ix+n) * fcos + foffset
	   E5
 00000298  62 F1 5C 48/ C2		vcmpltps k1, zmm4, zmm6	; k1[i:i]=1 if (zmm4 < ixdimpg)
	   CE 01
 0000029F  62 F1 5C 48/ C2		vcmpgeps k2, zmm4, FZMM0_0	; k2[i:i]=1 if (zmm4 >= 0)
	   15 00000080 R
	   0D
 000002AA  C5 F4/ 41 CA			kandw k1, k1, k2
 000002AE  62 F1 65 48/ EF		vpxord zmm3, zmm3, zmm3	; clear zmm3
	   DB
 000002B4  62 F1 7E 48/ 5B		vcvttps2dq zmm4, zmm4	; zmm4 float*8 to integer32*8
	   E4
 000002BA  62 F2 7D 49/ 90		vpgatherdd zmm3{k1}, [rsi + zmm4 * 4]	; load [rsi+zmm4*4] if k1[i:i]=1
	   1C A6
 000002C1  62 F1 6C 48/ C2		vcmpltps k1, zmm2, zmm1	; k1[i:i]=1 if (zmm2 < ixdimp)
	   C9 01
 000002C8  62 F1 7D 49/ 6F		vmovdqa32 zmm4{k1}, [rdi + rbx * 4]
	   24 9F
 000002CF  62 F1 65 48/ FE		vpaddd zmm4, zmm3, zmm4
	   E4
 000002D5  62 F1 7D 49/ 7F		vmovdqa32 [rdi + rbx * 4]{k1}, zmm4
	   24 9F

 000002DC  62 F1 6C 48/ 58		vaddps zmm2, zmm2, FZMM16_16	; zmm2 + 16.0
	   15 00000040 R
 000002E6  48/ 83 C3 10			add rbx, 16
 000002EA  49/ 3B DA			cmp rbx, r10
 000002ED  72 9D			jnae A5LOOPX	; ix < ixdimp
 000002EF			A5LOOPYEND2:
 000002EF  49/ 03 F9			add rdi, r9 ; +ixdimp*4
 000002F2  48/ FF C2			inc rdx	; iy++
 000002F5  49/ 3B D5			cmp rdx, r13
 000002F8  0F 82 FFFFFF5A		jnae A5LOOPY	; iy < iy1

 000002FE			RTN:
				;	ldmxcsr smxcsr
 000002FE  F3/ 0F 6F 7D			movdqu xmm7, regXMM7
	   E0
 00000303  F3/ 0F 6F 75			movdqu xmm6, regXMM6
	   F0
 00000308  41/ 5D			pop r13
 0000030A  41/ 5C			pop r12
 0000030C  5F				pop rdi
 0000030D  5E				pop rsi
 0000030E  5D				pop rbp
 0000030F  5B				pop rbx
					ret

 00000312			projx64 ENDP

				end
Microsoft (R) Macro Assembler (x64) Version 14.16.27025.1   06/04/24 13:09:45
projx64.asm						     Symbols 2 - 1




Segments:

                N a m e                  Length   Align   Class

DATA . . . . . . . . . . . . . .	 00000130 64	  


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

projx64  . . . . . . . . . . . .	P 	 00000000 _TEXT	Length= 00000312 Public
  regXMM6  . . . . . . . . . . .	XmmWord	 rbp - 00000010
  regXMM7  . . . . . . . . . . .	XmmWord	 rbp - 00000020
  LOOPY  . . . . . . . . . . . .	L 	 000000A2 _TEXT	
  LOOPX  . . . . . . . . . . . .	L 	 000000BA _TEXT	
  LOOPXSKIP1 . . . . . . . . . .	L 	 000000E1 _TEXT	
  LOOPXSKIP2 . . . . . . . . . .	L 	 000000F9 _TEXT	
  LOOPXSKIP3 . . . . . . . . . .	L 	 00000111 _TEXT	
  LOOPXEND . . . . . . . . . . .	L 	 00000129 _TEXT	
  LOOPYEND . . . . . . . . . . .	L 	 0000012E _TEXT	
  USEAVX . . . . . . . . . . . .	L 	 00000142 _TEXT	
  ALOOPY . . . . . . . . . . . .	L 	 00000185 _TEXT	
  ALOOPX . . . . . . . . . . . .	L 	 000001B0 _TEXT	
  ALOOPYEND2 . . . . . . . . . .	L 	 000001FE _TEXT	
  USEAVX512  . . . . . . . . . .	L 	 00000212 _TEXT	
  A5LOOPY  . . . . . . . . . . .	L 	 00000258 _TEXT	
  A5LOOPX  . . . . . . . . . . .	L 	 0000028C _TEXT	
  A5LOOPYEND2  . . . . . . . . .	L 	 000002EF _TEXT	
  RTN  . . . . . . . . . . . . .	L 	 000002FE _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

F00000000  . . . . . . . . . . .	DWord	 00000100 DATA	
F3210  . . . . . . . . . . . . .	DWord	 00000120 DATA	
F76543210  . . . . . . . . . . .	DWord	 000000C0 DATA	
F88888888  . . . . . . . . . . .	DWord	 000000E0 DATA	
FZMM0_0  . . . . . . . . . . . .	DWord	 00000080 DATA	
FZMM0_15 . . . . . . . . . . . .	DWord	 00000000 DATA	
FZMM16_16  . . . . . . . . . . .	DWord	 00000040 DATA	
WIN_X64  . . . . . . . . . . . .	Text   	 

	   0 Warnings
	   0 Errors
