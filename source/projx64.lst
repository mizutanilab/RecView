Microsoft (R) Macro Assembler (x64) Version 14.16.27025.1   12/04/21 16:48:04
projx64.asm						     Page 1 - 1


				;ml64.exe

 00000000			DATA segment align(32)
 00000000 00000000		F76543210 real4 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0
	   3F800000
	   40000000
	   40400000
	   40800000
	   40A00000
	   40C00000
	   40E00000
 00000020 41000000		F88888888 real4 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0
	   41000000
	   41000000
	   41000000
	   41000000
	   41000000
	   41000000
	   41000000
 00000040 00000000		F00000000 real4 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
 00000060 00000000		F3210 real4 0.0, 1.0, 2.0, 3.0
	   3F800000
	   40000000
	   40400000
 00000070			DATA ends

 00000000			.code

 00000000			projx64 PROC
				;	mov r10, rcx ; the first arg = rcx
				;	mov r10, rdx ; the 2nd arg = rdx
				;	mov rax, r10 ; rax to return result

				;			for (int iy=iy0; iy<iy1; iy++) {
				;				const int ifpidx = iy * ixdimp;
				;				const float fyoff = iy * fsin + foffset;
				;				for (int ix=0; ix<ixdimp; ix++) {
				;					int ix0 = (int)(ix * fcos + fyoff);
				;					if (ix0 < 0) continue;
				;					if (ix0 >= ixdimpg) continue;
				;					ifp[ifpidx + ix] += ipgp[ix0];
				;				}
				;			}

				;local valiables
				;	local pmxcsr :dword
				;	local smxcsr :dword
					local regXMM6 :oword
					local regXMM7 :oword

				;store registers
 00000008  53				push rbx
 00000009  55				push rbp
 0000000A  56				push rsi
 0000000B  57				push rdi
 0000000C  41/ 54			push r12
 0000000E  41/ 55			push r13
 00000010  F3/ 0F 7F 75			movdqu regXMM6, xmm6
	   F0
 00000015  F3/ 0F 7F 7D			movdqu regXMM7, xmm7
	   E0

				;get pointer to args
 0000001A  48/ 8B F1			mov rsi, rcx	; arg #1

				;init params
				;	mov ixdimpg, [rsi + 24]
 0000001D  4C/ 8B 56 20			mov r10, [rsi + 32]	; ixdimp
 00000021  4D/ 8B CA			mov r9, r10
 00000024  49/ C1 E1 02			shl r9, 2	; r9<==ixdimp * 4
				;	mov ifp, [rsi + 40]
				;	mov igp, [rsi + 48]
 00000028  4C/ 8B 66 40			mov r12, [rsi + 64]	;iy0
 0000002C  4C/ 8B 6E 48			mov r13, [rsi + 72]	;iy1

				;sse rounding mode RC=00B (MXCSR[14:13])
				;	stmxcsr smxcsr
				;	stmxcsr pmxcsr
				;	and pmxcsr, 0FFFF9FFFh
				;	ldmxcsr pmxcsr

				;jump to AVX routine
 00000030  48/ 8B 46 38			mov rax, [rsi + 56]	; AVX flag
 00000034  48/ 83 E0 01			and rax, 000000001h
 00000038  0F 85 000000F6		jnz USEAVX

				;load valiables	
 0000003E  49/ 8B C5			mov rax, r13; iy = iy1
 00000041  48/ FF C8			dec rax
 00000044  49/ 8B CA			mov rcx, r10; ix = ixdimp
 00000047  48/ F7 E9			imul rcx
 0000004A  48/ C1 E0 02			shl rax, 2	; ixy = ixdimp * (iy1 - 1) * 4
 0000004E  48/ 03 46 28			add rax, [rsi + 40]	; ixy += ifp
 00000052  48/ 8B F8			mov rdi, rax

 00000055  48/ 8B 06			mov rax, [rsi]	; &fcos
 00000058  F3/ 0F 10 00			movss xmm0, real4 ptr [rax]
 0000005C  0F C6 C0 00			shufps xmm0, xmm0, 0
					
 00000060  48/ 8B 46 08			mov rax, [rsi + 8]	; &fsin
 00000064  F3/ 0F 10 08			movss xmm1, real4 ptr [rax]
 00000068  0F C6 C9 00			shufps xmm1, xmm1, 0

 0000006C  48/ 8B 46 10			mov rax, [rsi + 16]	; &foffset
 00000070  F3/ 0F 10 38			movss xmm7, real4 ptr [rax]
 00000074  0F C6 FF 00			shufps xmm7, xmm7, 0

 00000078  0F 28 35			movaps xmm6, F3210
	   00000060 R
					
				;start process
 0000007F  48/ 8B 4E 18			mov rcx, [rsi + 24]	; ixdimpg
 00000083  48/ 8B 76 30			mov rsi, [rsi + 48]	; igp

 00000087  49/ 8B D5			mov rdx, r13	; iy<==iy1
 0000008A  48/ FF CA			dec rdx
 0000008D  48/ C7 C0			mov rax, 0
	   00000000
 00000094			LOOPY:
 00000094  49/ 8B DA			mov rbx, r10	; ix<==ixdimp
 00000097  48/ FF CB			dec rbx
 0000009A  F3/ 48/ 0F 2A DA		cvtsi2ss xmm3, rdx	; xmm3<==iy
 0000009F  0F C6 DB 00			shufps xmm3, xmm3, 0	; xmm3<==iy, iy, iy, iy
 000000A3  0F 28 E9			movaps xmm5, xmm1	; xmm5<==fsin, fsin, fsin, fsin
 000000A6  0F 59 EB			mulps xmm5, xmm3	; iy * fsin for each float
 000000A9  0F 58 EF			addps xmm5, xmm7	; + foffset for each float
 000000AC			LOOPX:
 000000AC  F3/ 48/ 0F 2A D3		cvtsi2ss xmm2, rbx	; xmm2<==ix
 000000B1  0F C6 D2 00			shufps xmm2, xmm2, 0	; xmm2<==ix, ix, ix, ix
 000000B5  0F 5C D6			subps xmm2, xmm6	; xmm2<==ix-3, ix-2, ix-2, ix
 000000B8  0F 28 E0			movaps xmm4, xmm0	; xmm4<==fcos, fcos, fcos, fcos
 000000BB  0F 59 E2			mulps xmm4, xmm2	; (ix-n) * fcos
 000000BE  0F 58 E5			addps xmm4, xmm5	; (ix-n) * fcos + foffset
 000000C1  F3/ 0F 5B E4			cvttps2dq xmm4, xmm4	; xmm4 float*4 to integer32*4
 000000C5  66| 0F 7E E0			movd eax, xmm4	; lower 4 bytes to eax
				;	pextrd eax, xmm4, 0	; SSE4.1
 000000C9  3B C1			cmp eax, ecx	; ix<=>ixdimpg
 000000CB  73 06			jae LOOPXSKIP1	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 000000CD  8B 04 86			mov eax, [rsi + rax * 4]	; eax<==igp[ix * DBPT_GINTP]
 000000D0  01 04 9F			add [rdi + rbx * 4], eax	; ifp[ix] += eax
 000000D3			LOOPXSKIP1:
 000000D3  48/ FF CB			dec rbx	; ix--
 000000D6  7C 48			jl LOOPYEND	; ix < 0
 000000D8  66| 0F 73 DC			psrldq xmm4, 4	; shift right by 4 bytes (integer32)
	   04
 000000DD  66| 0F 7E E0			movd eax, xmm4
				;	pextrd eax, xmm4, 1	; SSE4.1
 000000E1  3B C1			cmp eax, ecx; ixdimpg
 000000E3  73 06			jae LOOPXSKIP2	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 000000E5  8B 04 86			mov eax, [rsi + rax * 4]
 000000E8  01 04 9F			add [rdi + rbx * 4], eax
 000000EB			LOOPXSKIP2:
 000000EB  48/ FF CB			dec rbx	; ix--
 000000EE  7C 30			jl LOOPYEND	; ix < 0
 000000F0  66| 0F 73 DC			psrldq xmm4, 4
	   04
 000000F5  66| 0F 7E E0			movd eax, xmm4
				;	pextrd eax, xmm4, 2	; SSE4.1
 000000F9  3B C1			cmp eax, ecx; ixdimpg
 000000FB  73 06			jae LOOPXSKIP3	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 000000FD  8B 04 86			mov eax, [rsi + rax * 4]
 00000100  01 04 9F			add [rdi + rbx * 4], eax
 00000103			LOOPXSKIP3:
 00000103  48/ FF CB			dec rbx	; ix--
 00000106  7C 18			jl LOOPYEND	; ix < 0
 00000108  66| 0F 73 DC			psrldq xmm4, 4
	   04
 0000010D  66| 0F 7E E0			movd eax, xmm4
				;	pextrd eax, xmm4, 3	; SSE4.1
 00000111  3B C1			cmp eax, ecx; ixdimpg
 00000113  73 06			jae LOOPXEND	; ix0 >= ixdimp * DBPT_GINTP or ix0 < 0
 00000115  8B 04 86			mov eax, [rsi + rax * 4]
 00000118  01 04 9F			add [rdi + rbx * 4], eax
 0000011B			LOOPXEND:
 0000011B  48/ FF CB			dec rbx	; ix--
 0000011E  7D 8C			jge LOOPX	; ix >= 0
 00000120			LOOPYEND:
 00000120  49/ 2B F9			sub rdi, r9 ; ixdimp*4
 00000123  48/ FF CA			dec rdx	; iy--
 00000126  49/ 3B D4			cmp rdx, r12
 00000129  0F 8D FFFFFF65		jge LOOPY	; iy >= iy0

 0000012F  E9 000000CB			jmp RTN

 00000134			USEAVX:
				;load valiables	
 00000134  48/ 8B 06			mov rax, [rsi]	; &fcos
 00000137  C4 E2 7D/ 18 00		vbroadcastss ymm0, real4 ptr [rax]
 0000013C  4C/ 8B 46 08			mov r8, [rsi + 8]	; &fsin
 00000140  4C/ 8B 5E 10			mov r11, [rsi + 16]	; &foffset

 00000144  48/ 8B 4E 18			mov rcx, [rsi + 24]	; ixdimpg
 00000148  C4 E1 CA/ 2A F1		vcvtsi2ss xmm6, xmm6, rcx	; xmm6<==ixdimpg
 0000014D  C4 E2 7D/ 18 F6		vbroadcastss ymm6, xmm6	; ymm6<==ixdimpg, ixdimpg, ixdimpg, ixdimpg
 00000152  C4 C1 F2/ 2A CA		vcvtsi2ss xmm1, xmm1, r10	; xmm1<==ixdimp
 00000157  C4 E2 7D/ 18 C9		vbroadcastss ymm1, xmm1	; ymm1<==ixdimp, ixdimp, ixdimp, ixdimp
					
 0000015C  49/ 8B C4			mov rax, r12; iy = iy0
 0000015F  49/ 8B CA			mov rcx, r10; ix = ixdimp
 00000162  48/ F7 E9			imul rcx
 00000165  48/ C1 E0 02			shl rax, 2	; ixy = ixdimp * iy0 * 4
 00000169  48/ 03 46 28			add rax, [rsi + 40]	; ixy += ifp
 0000016D  48/ 8B F8			mov rdi, rax
				;	mov rdi, [rsi + 40]	; ifp
 00000170  48/ 8B 76 30			mov rsi, [rsi + 48]	; igp

 00000174  49/ 8B D4			mov rdx, r12	; iy<==iy0
 00000177			ALOOPY:
 00000177  48/ C7 C3			mov rbx, 0	; ix<==0
	   00000000
 0000017E  C5 FC/ 28 15			vmovaps ymm2, F76543210	; reset ix
	   00000000 R
 00000186  C4 E1 E2/ 2A DA		vcvtsi2ss xmm3, xmm3, rdx	; xmm3<==iy
 0000018B  C4 E2 7D/ 18 DB		vbroadcastss ymm3, xmm3	; xmm3<==iy, iy, iy, iy
 00000190  C4 C2 7D/ 18 28		vbroadcastss ymm5, real4 ptr [r8]
 00000195  C5 D4/ 59 EB			vmulps ymm5, ymm5, ymm3	; iy * fsin for each float
 00000199  C4 C2 7D/ 18 3B		vbroadcastss ymm7, real4 ptr [r11]	; ymm7<==foffset
 0000019E  C5 D4/ 58 EF			vaddps ymm5, ymm5, ymm7	; ymm5<==iy * fsin + foffset
 000001A2			ALOOPX:
 000001A2  C5 FC/ 59 E2			vmulps ymm4, ymm0, ymm2	; (ix+n) * fcos
 000001A6  C5 DC/ 58 E5			vaddps ymm4, ymm4, ymm5	; (ix+n) * fcos + foffset
 000001AA  C5 DC/ C2 FE 01		vcmpltps ymm7, ymm4, ymm6	; ymm7[i:i]=1 if (ymm4 < ixdimpg)
 000001AF  C5 DC/ C2 1D			vcmpgeps ymm3, ymm4, F00000000	; ymm3[i:i]=1 if (ymm4 >= 0)
	   00000040 R 0D
 000001B8  C5 C5/ DB FB			vpand ymm7, ymm7, ymm3
 000001BC  C5 E5/ EF DB			vpxor ymm3, ymm3, ymm3	; clear ymm3
 000001C0  C5 FE/ 5B E4			vcvttps2dq ymm4, ymm4	; ymm4 float*8 to integer32*8
 000001C4  C4 E2 45/ 90 1C		vpgatherdd ymm3, [rsi + ymm4 * 4], ymm7	; load [rsi+ymm4*4] if ymm7=1
	   A6
 000001CA  C5 EC/ C2 F9 01		vcmpltps ymm7, ymm2, ymm1	; ymm7[i:i]=1 if (ymm2 < ixdimp)
 000001CF  C4 E2 45/ 8C 24		vpmaskmovd ymm4, ymm7, [rdi + rbx * 4]
	   9F
 000001D5  C5 E5/ FE E4			vpaddd ymm4, ymm3, ymm4
 000001D9  C4 E2 45/ 8E 24		vpmaskmovd [rdi + rbx * 4], ymm7, ymm4
	   9F

 000001DF  C5 EC/ 58 15			vaddps ymm2, ymm2, F88888888	; ymm2 + 8.0
	   00000020 R
 000001E7  48/ 83 C3 08			add rbx, 8
 000001EB  49/ 3B DA			cmp rbx, r10
 000001EE  72 B2			jnae ALOOPX	; ix < ixdimp
 000001F0			ALOOPYEND2:
 000001F0  49/ 03 F9			add rdi, r9 ; +ixdimp*4
 000001F3  48/ FF C2			inc rdx	; iy++
 000001F6  49/ 3B D5			cmp rdx, r13
 000001F9  0F 82 FFFFFF78		jnae ALOOPY	; iy < iy1

 000001FF			RTN:
				;	ldmxcsr smxcsr
 000001FF  F3/ 0F 6F 7D			movdqu xmm7, regXMM7
	   E0
 00000204  F3/ 0F 6F 75			movdqu xmm6, regXMM6
	   F0
 00000209  41/ 5D			pop r13
 0000020B  41/ 5C			pop r12
 0000020D  5F				pop rdi
 0000020E  5E				pop rsi
 0000020F  5D				pop rbp
 00000210  5B				pop rbx
					ret

 00000213			projx64 ENDP

				end
Microsoft (R) Macro Assembler (x64) Version 14.16.27025.1   12/04/21 16:48:04
projx64.asm						     Symbols 2 - 1




Segments:

                N a m e                  Length   Align   Class

DATA . . . . . . . . . . . . . .	 00000070 32	  


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

projx64  . . . . . . . . . . . .	P 	 00000000 _TEXT	Length= 00000213 Public
  regXMM6  . . . . . . . . . . .	XmmWord	 rbp - 00000010
  regXMM7  . . . . . . . . . . .	XmmWord	 rbp - 00000020
  LOOPY  . . . . . . . . . . . .	L 	 00000094 _TEXT	
  LOOPX  . . . . . . . . . . . .	L 	 000000AC _TEXT	
  LOOPXSKIP1 . . . . . . . . . .	L 	 000000D3 _TEXT	
  LOOPXSKIP2 . . . . . . . . . .	L 	 000000EB _TEXT	
  LOOPXSKIP3 . . . . . . . . . .	L 	 00000103 _TEXT	
  LOOPXEND . . . . . . . . . . .	L 	 0000011B _TEXT	
  LOOPYEND . . . . . . . . . . .	L 	 00000120 _TEXT	
  USEAVX . . . . . . . . . . . .	L 	 00000134 _TEXT	
  ALOOPY . . . . . . . . . . . .	L 	 00000177 _TEXT	
  ALOOPX . . . . . . . . . . . .	L 	 000001A2 _TEXT	
  ALOOPYEND2 . . . . . . . . . .	L 	 000001F0 _TEXT	
  RTN  . . . . . . . . . . . . .	L 	 000001FF _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

F00000000  . . . . . . . . . . .	DWord	 00000040 DATA	
F3210  . . . . . . . . . . . . .	DWord	 00000060 DATA	
F76543210  . . . . . . . . . . .	DWord	 00000000 DATA	
F88888888  . . . . . . . . . . .	DWord	 00000020 DATA	
WIN_X64  . . . . . . . . . . . .	Text   	 

	   0 Warnings
	   0 Errors
